'use strict';

var utils = {
  setCss: function setCss(dom) {
    for (var _len = arguments.length, props = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      props[_key - 1] = arguments[_key];
    }

    for (var i = props.length; i--;) {
      for (var key in props[i]) {
        dom.style[key] = props[i][key];
      }
    }
  },
  convertBase64UrlToBlob: function convertBase64UrlToBlob(urlData) {
    // base64blob文件
    var bytes = window.atob(urlData.split(',')[1]); // 去掉url的头，并转换为byte
    // 处理异常,将ascii码小于0的转换为大于0
    var ab = new ArrayBuffer(bytes.length);
    var ia = new Uint8Array(ab);
    for (var i = 0; i < bytes.length; i++) {
      ia[i] = bytes.charCodeAt(i);
    }
    return new Blob([ab], { type: 'image/png' });
  }
};

var styles = {
  canvas: {
    width: '100%',
    height: '100%',
    position: 'absolute',
    background: '#000'
  },
  container: {
    width: '100%',
    height: '100%',
    top: '0',
    bottom: '0',
    left: '0',
    right: '0',
    position: 'fixed',
    background: 'rgba(0,0,0,.6)',
    zIndex: '1000'
  },
  btnContainer: {
    width: '100%',
    position: 'absolute',
    bottom: '0',
    left: '0',
    paddingBottom: '6px',
    zIndex: '1001'
  },
  btn: {
    color: '#fff',
    fontSize: '16px',
    display: 'inline-block',
    textAlign: 'center'
  }
};

/* AlloyFinger v0.1.10
 * By dntzhang
 * Github: https://github.com/AlloyTeam/AlloyFinger
 */
function getLen(v) {
    return Math.sqrt(v.x * v.x + v.y * v.y);
}

function dot(v1, v2) {
    return v1.x * v2.x + v1.y * v2.y;
}

function getAngle(v1, v2) {
    var mr = getLen(v1) * getLen(v2);
    if (mr === 0) return 0;
    var r = dot(v1, v2) / mr;
    if (r > 1) r = 1;
    return Math.acos(r);
}

function cross(v1, v2) {
    return v1.x * v2.y - v2.x * v1.y;
}

function getRotateAngle(v1, v2) {
    var angle = getAngle(v1, v2);
    if (cross(v1, v2) > 0) {
        angle *= -1;
    }

    return angle * 180 / Math.PI;
}

var HandlerAdmin = function HandlerAdmin(el) {
    this.handlers = [];
    this.el = el;
};

HandlerAdmin.prototype.add = function (handler) {
    this.handlers.push(handler);
};

HandlerAdmin.prototype.del = function (handler) {
    if (!handler) this.handlers = [];

    for (var i = this.handlers.length; i >= 0; i--) {
        if (this.handlers[i] === handler) {
            this.handlers.splice(i, 1);
        }
    }
};

HandlerAdmin.prototype.dispatch = function () {
    for (var i = 0, len = this.handlers.length; i < len; i++) {
        var handler = this.handlers[i];
        if (typeof handler === 'function') handler.apply(this.el, arguments);
    }
};

function wrapFunc(el, handler) {
    var handlerAdmin = new HandlerAdmin(el);
    handlerAdmin.add(handler);

    return handlerAdmin;
}

var AlloyFinger = function AlloyFinger(el, option) {

    this.element = typeof el == 'string' ? document.querySelector(el) : el;

    this.start = this.start.bind(this);
    this.move = this.move.bind(this);
    this.end = this.end.bind(this);
    this.cancel = this.cancel.bind(this);
    this.element.addEventListener("touchstart", this.start, false);
    this.element.addEventListener("touchmove", this.move, false);
    this.element.addEventListener("touchend", this.end, false);
    this.element.addEventListener("touchcancel", this.cancel, false);

    this.preV = { x: null, y: null };
    this.pinchStartLen = null;
    this.zoom = 1;
    this.isDoubleTap = false;

    var noop = function noop() {};

    this.rotate = wrapFunc(this.element, option.rotate || noop);
    this.touchStart = wrapFunc(this.element, option.touchStart || noop);
    this.multipointStart = wrapFunc(this.element, option.multipointStart || noop);
    this.multipointEnd = wrapFunc(this.element, option.multipointEnd || noop);
    this.pinch = wrapFunc(this.element, option.pinch || noop);
    this.swipe = wrapFunc(this.element, option.swipe || noop);
    this.tap = wrapFunc(this.element, option.tap || noop);
    this.doubleTap = wrapFunc(this.element, option.doubleTap || noop);
    this.longTap = wrapFunc(this.element, option.longTap || noop);
    this.singleTap = wrapFunc(this.element, option.singleTap || noop);
    this.pressMove = wrapFunc(this.element, option.pressMove || noop);
    this.twoFingerPressMove = wrapFunc(this.element, option.twoFingerPressMove || noop);
    this.touchMove = wrapFunc(this.element, option.touchMove || noop);
    this.touchEnd = wrapFunc(this.element, option.touchEnd || noop);
    this.touchCancel = wrapFunc(this.element, option.touchCancel || noop);

    this._cancelAllHandler = this.cancelAll.bind(this);

    window.addEventListener('scroll', this._cancelAllHandler);

    this.delta = null;
    this.last = null;
    this.now = null;
    this.tapTimeout = null;
    this.singleTapTimeout = null;
    this.longTapTimeout = null;
    this.swipeTimeout = null;
    this.x1 = this.x2 = this.y1 = this.y2 = null;
    this.preTapPosition = { x: null, y: null };
};

AlloyFinger.prototype = {
    start: function start(evt) {
        if (!evt.touches) return;
        this.now = Date.now();
        this.x1 = evt.touches[0].pageX;
        this.y1 = evt.touches[0].pageY;
        this.delta = this.now - (this.last || this.now);
        this.touchStart.dispatch(evt, this.element);
        if (this.preTapPosition.x !== null) {
            this.isDoubleTap = this.delta > 0 && this.delta <= 250 && Math.abs(this.preTapPosition.x - this.x1) < 30 && Math.abs(this.preTapPosition.y - this.y1) < 30;
            if (this.isDoubleTap) clearTimeout(self.singleTapTimeout);
        }
        this.preTapPosition.x = this.x1;
        this.preTapPosition.y = this.y1;
        this.last = this.now;
        var preV = this.preV,
            len = evt.touches.length;
        if (len > 1) {
            this._cancelLongTap();
            this._cancelSingleTap();
            var v = { x: evt.touches[1].pageX - this.x1, y: evt.touches[1].pageY - this.y1 };
            preV.x = v.x;
            preV.y = v.y;
            this.pinchStartLen = getLen(preV);
            this.multipointStart.dispatch(evt, this.element);
        }
        this._preventTap = false;
        this.longTapTimeout = setTimeout(function () {
            this.longTap.dispatch(evt, this.element);
            this._preventTap = true;
        }.bind(this), 750);
    },
    move: function move(evt) {
        if (!evt.touches) return;
        var preV = this.preV,
            len = evt.touches.length,
            currentX = evt.touches[0].pageX,
            currentY = evt.touches[0].pageY;
        this.isDoubleTap = false;
        if (len > 1) {
            var sCurrentX = evt.touches[1].pageX,
                sCurrentY = evt.touches[1].pageY;
            var v = { x: evt.touches[1].pageX - currentX, y: evt.touches[1].pageY - currentY };

            if (preV.x !== null) {
                if (this.pinchStartLen > 0) {
                    evt.zoom = getLen(v) / this.pinchStartLen;
                    this.pinch.dispatch(evt, this.element);
                }

                evt.angle = getRotateAngle(v, preV);
                this.rotate.dispatch(evt, this.element);
            }
            preV.x = v.x;
            preV.y = v.y;

            if (this.x2 !== null && this.sx2 !== null) {
                evt.deltaX = (currentX - this.x2 + sCurrentX - this.sx2) / 2;
                evt.deltaY = (currentY - this.y2 + sCurrentY - this.sy2) / 2;
            } else {
                evt.deltaX = 0;
                evt.deltaY = 0;
            }
            this.twoFingerPressMove.dispatch(evt, this.element);

            this.sx2 = sCurrentX;
            this.sy2 = sCurrentY;
        } else {
            if (this.x2 !== null) {
                evt.deltaX = currentX - this.x2;
                evt.deltaY = currentY - this.y2;

                //move事件中添加对当前触摸点到初始触摸点的判断，
                //如果曾经大于过某个距离(比如10),就认为是移动到某个地方又移回来，应该不再触发tap事件才对。
                var movedX = Math.abs(this.x1 - this.x2),
                    movedY = Math.abs(this.y1 - this.y2);

                if (movedX > 10 || movedY > 10) {
                    this._preventTap = true;
                }
            } else {
                evt.deltaX = 0;
                evt.deltaY = 0;
            }

            this.pressMove.dispatch(evt, this.element);
        }

        this.touchMove.dispatch(evt, this.element);

        this._cancelLongTap();
        this.x2 = currentX;
        this.y2 = currentY;

        if (len > 1) {
            evt.preventDefault();
        }
    },
    end: function end(evt) {
        if (!evt.changedTouches) return;
        this._cancelLongTap();
        var self = this;
        if (evt.touches.length < 2) {
            this.multipointEnd.dispatch(evt, this.element);
            this.sx2 = this.sy2 = null;
        }

        //swipe
        if (this.x2 && Math.abs(this.x1 - this.x2) > 30 || this.y2 && Math.abs(this.y1 - this.y2) > 30) {
            evt.direction = this._swipeDirection(this.x1, this.x2, this.y1, this.y2);
            this.swipeTimeout = setTimeout(function () {
                self.swipe.dispatch(evt, self.element);
            }, 0);
        } else {
            this.tapTimeout = setTimeout(function () {
                if (!self._preventTap) {
                    self.tap.dispatch(evt, self.element);
                }
                // trigger double tap immediately
                if (self.isDoubleTap) {
                    self.doubleTap.dispatch(evt, self.element);
                    self.isDoubleTap = false;
                }
            }, 0);

            if (!self.isDoubleTap) {
                self.singleTapTimeout = setTimeout(function () {
                    self.singleTap.dispatch(evt, self.element);
                }, 250);
            }
        }

        this.touchEnd.dispatch(evt, this.element);

        this.preV.x = 0;
        this.preV.y = 0;
        this.zoom = 1;
        this.pinchStartLen = null;
        this.x1 = this.x2 = this.y1 = this.y2 = null;
    },
    cancelAll: function cancelAll() {
        this._preventTap = true;
        clearTimeout(this.singleTapTimeout);
        clearTimeout(this.tapTimeout);
        clearTimeout(this.longTapTimeout);
        clearTimeout(this.swipeTimeout);
    },
    cancel: function cancel(evt) {
        this.cancelAll();
        this.touchCancel.dispatch(evt, this.element);
    },
    _cancelLongTap: function _cancelLongTap() {
        clearTimeout(this.longTapTimeout);
    },
    _cancelSingleTap: function _cancelSingleTap() {
        clearTimeout(this.singleTapTimeout);
    },
    _swipeDirection: function _swipeDirection(x1, x2, y1, y2) {
        return Math.abs(x1 - x2) >= Math.abs(y1 - y2) ? x1 - x2 > 0 ? 'Left' : 'Right' : y1 - y2 > 0 ? 'Up' : 'Down';
    },

    on: function on(evt, handler) {
        if (this[evt]) {
            this[evt].add(handler);
        }
    },

    off: function off(evt, handler) {
        if (this[evt]) {
            this[evt].del(handler);
        }
    },

    destroy: function destroy() {
        if (this.singleTapTimeout) clearTimeout(this.singleTapTimeout);
        if (this.tapTimeout) clearTimeout(this.tapTimeout);
        if (this.longTapTimeout) clearTimeout(this.longTapTimeout);
        if (this.swipeTimeout) clearTimeout(this.swipeTimeout);

        this.element.removeEventListener("touchstart", this.start);
        this.element.removeEventListener("touchmove", this.move);
        this.element.removeEventListener("touchend", this.end);
        this.element.removeEventListener("touchcancel", this.cancel);

        this.rotate.del();
        this.touchStart.del();
        this.multipointStart.del();
        this.multipointEnd.del();
        this.pinch.del();
        this.swipe.del();
        this.tap.del();
        this.doubleTap.del();
        this.longTap.del();
        this.singleTap.del();
        this.pressMove.del();
        this.twoFingerPressMove.del();
        this.touchMove.del();
        this.touchEnd.del();
        this.touchCancel.del();

        this.preV = this.pinchStartLen = this.zoom = this.isDoubleTap = this.delta = this.last = this.now = this.tapTimeout = this.singleTapTimeout = this.longTapTimeout = this.swipeTimeout = this.x1 = this.x2 = this.y1 = this.y2 = this.preTapPosition = this.rotate = this.touchStart = this.multipointStart = this.multipointEnd = this.pinch = this.swipe = this.tap = this.doubleTap = this.longTap = this.singleTap = this.pressMove = this.touchMove = this.touchEnd = this.touchCancel = this.twoFingerPressMove = null;

        window.removeEventListener('scroll', this._cancelAllHandler);
        return null;
    }
};

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
var setCss = utils.setCss,
    convertBase64UrlToBlob = utils.convertBase64UrlToBlob;

var ImbCrop = function () {
  function ImbCrop(params) {
    _classCallCheck(this, ImbCrop);

    var data = {
      file: null,
      src: '',
      onConfirm: function onConfirm() {},
      onCancel: function onCancel() {},
      imageRatio: '1:1', // width:height
      confirmText: '确定',
      cancelText: '取消',
      rotateText: '旋转'
    };
    data = Object.assign(data, params);
    this.onConfirm = data.onConfirm;
    this.onCancel = data.onCancel;
    this.source = data.file || data.src;
    this.confirmText = data.confirmText;
    this.cancelText = data.cancelText;
    this.rotateText = data.rotateText;
    this.imageRatio = data.imageRatio;
    this.winWidth = window.innerWidth; // 屏幕尺寸
    this.winHeight = window.innerHeight;
    this.isTouch = false;
    this.canvas = document.createElement('canvas');
    this.ctx = null;
    this.drawWidth = 0;
    this.drawHeight = 0;
    this.scale = 1;
    this.originX = 0;
    this.originY = 0;
    this.imgPos = {}; // 保存图片绘制坐标信息
    this.clipWidth = 0; // 裁剪宽度
    this.clipHeight = 0; // 裁剪高度
    this.rectPos = {}; // 保存裁剪区域信息
    this.container = null;
    EXIF: window.EXIF, this.preventHandle = function (e) {
      e.preventDefault();
    };
    this.af = new AlloyFinger(this.canvas, {
      pinch: this.pinch.bind(this),
      multipointEnd: this.multipointEnd.bind(this),
      pressMove: this.pressMove.bind(this)
    });
    this.imgHeight = 0; // canvas上绘制的img属性
    this.imgWidth = 0;
    this.imgObj = null;
    this.initHtml();
    this.source && this.loadSource();
  }

  _createClass(ImbCrop, [{
    key: 'initHtml',
    value: function initHtml() {
      var frag = document.createDocumentFragment();
      this.container = document.createElement('div');
      setCss(this.canvas, styles.canvas);
      setCss(this.container, styles.container);
      var btnContainer = document.createElement('div');
      var _ref = [this.createBtn(this.confirmText), this.createBtn(this.rotateText), this.createBtn(this.cancelText)],
          confirmBtn = _ref[0],
          rotateBtn = _ref[1],
          cancelBtn = _ref[2];

      confirmBtn.addEventListener('click', this.confirm.bind(this), false);
      rotateBtn.addEventListener('click', this.rotate.bind(this), false);
      cancelBtn.addEventListener('click', this.cancel.bind(this), false);
      setCss(cancelBtn, styles.btn, { width: '15%' });
      setCss(rotateBtn, styles.btn, { width: '70%' });
      setCss(confirmBtn, styles.btn, { width: '15%' });
      setCss(btnContainer, styles.btnContainer);
      btnContainer.appendChild(cancelBtn);
      btnContainer.appendChild(rotateBtn);
      btnContainer.appendChild(confirmBtn);
      frag.appendChild(btnContainer);
      frag.appendChild(this.canvas);
      this.container.appendChild(frag);
      document.body.appendChild(this.container);
    }
  }, {
    key: 'createBtn',
    value: function createBtn(name) {
      var btn = document.createElement('span');
      btn.innerHTML = name;
      return btn;
    }
  }, {
    key: 'src2obj',
    value: function src2obj(src, crossOrigin) {
      return new Promise(function (resolve, reject) {
        var img = new Image();
        if (crossOrigin) {
          img.crossOrigin = 'Anonymous';
        }
        img.src = src;
        img.addEventListener('load', loadEvt);
        img.addEventListener('error', errorEvt);
        function loadEvt() {
          return resolve(img);
          removeEvt();
        }
        function errorEvt() {
          return reject();
          removeEvt();
        }
        function removeEvt() {
          img.removeEventListener('load', loadEvt);
          img.removeEventListener('error', errorEvt);
        }
      });
    }
  }, {
    key: 'loadSource',
    value: function loadSource() {
      var _this = this;

      var me = this;
      // 文件类型判断
      if (typeof this.source === 'string') {
        var needsCross = /(https?|ftp|file):\/\/[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]/.test(this.source);
        this.src2obj(this.source, needsCross).then(function (img) {
          _this.imgLoadCallback(img);
        });
      } else {
        if (!/image\/[png|jpeg|jpg]/.test(this.source.type)) {
          alert('请上传文件类型为png/jpeg/jpg其中一种的图片!');
          return false;
        }
        var reader = new FileReader();
        reader.readAsDataURL(this.source);
        reader.onload = function (event) {
          me.src2obj(event.target.result).then(function (img) {
            me.imgLoadCallback(img);
          });
        };
      }
    }
    // 图片加载后的统一回调

  }, {
    key: 'imgLoadCallback',
    value: function imgLoadCallback(imgObj) {
      // 这里可能存在旋转的情况
      if (this.EXIF && this.getPhotoOrientation(imgObj)) {
        var rightImg = new Image();
        rightImg.src = this.getRightBase64(imgObj);
        rightImg.onload = function () {
          this.setRightImgInfo(imgObj);
        };
      } else {
        this.setRightImgInfo(imgObj);
      }
    }
  }, {
    key: 'setRightImgInfo',
    value: function setRightImgInfo(imgObj) {
      // 获取到正确的图片后进行信息获取
      this.imgWidth = imgObj.width;
      this.imgHeight = imgObj.height;
      this.imgObj = imgObj;
      var canvas = document.createElement('canvas');
      var ctx = canvas.getContext('2d');
      canvas.width = this.imgWidth;
      canvas.height = this.imgHeight;
      ctx.drawImage(imgObj, 0, 0, this.imgWidth, this.imgHeight);
      this.initCut();
    }
  }, {
    key: 'initCut',
    value: function initCut() {
      // 这里需要将body的touchmove事件屏蔽掉 否认安卓会滚 // 紧随
      this.container.style.display = 'block';
      document.body.addEventListener('touchmove', this.preventHandle);
      this.originX = this.winWidth / 2;
      this.originY = this.winHeight / 2;
      var ratio = this.imageRatio.split(':');
      var limitHeight = ratio ? ratio[1] * this.winWidth / ratio[0] : this.winWidth; // 根据设置的图片比例，算出的高度
      if (this.imgWidth < this.imgHeight) {
        this.drawWidth = this.winWidth;
        this.scale = this.drawWidth / this.imgWidth;
        this.drawHeight = this.scale * this.imgHeight;
        if (this.drawHeight < limitHeight) {
          // 当缩放后的高度小于限制高度，高度设为限制高度，宽度等比自适应
          this.drawHeight = limitHeight;
          this.drawWidth = this.imgWidth * limitHeight / this.imgHeight;
          this.scale = this.drawWidth / this.imgWidth;
        }
      } else {
        this.drawHeight = limitHeight;
        this.scale = this.drawHeight / this.imgHeight;
        this.drawWidth = this.scale * this.imgWidth;
        if (this.drawWidth < this.winWidth) {
          // 当缩放后的宽度小于屏幕宽度，宽度设为屏幕宽度，高度等比自适应
          this.drawWidth = this.winWidth;
          this.drawHeight = this.winWidth * this.imgHeight / this.imgWidth;
          this.scale = this.drawHeight / this.imgHeight;
        }
      }
      this.ctx = this.canvas.getContext('2d');
      this.canvas.width = this.winWidth;
      this.canvas.height = this.winHeight;
      this.drawImage();
      this.drawClipRect();
      this.drawMask();
    }
  }, {
    key: 'drawImage',
    value: function drawImage() {
      // 根据origin和偏移量来实时调整
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      this.ctx.drawImage(this.imgObj, this.originX - this.drawWidth / 2, this.originY - this.drawHeight / 2, this.drawWidth, this.drawHeight);
      this.imgPos = {
        x1: this.originX - this.drawWidth / 2,
        y1: this.originY - this.drawHeight / 2
      };
      this.imgPos.x2 = this.imgPos.x1 + this.drawWidth;
      this.imgPos.y2 = this.imgPos.y1 + this.drawHeight;
    }
  }, {
    key: 'drawClipRect',
    value: function drawClipRect() {
      // 绘制裁剪区域
      this.ctx.fillStyle = '#fff';
      this.ctx.strokeStyle = '#fff';
      var ratio = this.imageRatio.split(':');
      this.clipHeight = ratio ? ratio[1] * this.winWidth / ratio[0] : this.winWidth;
      this.clipWidth = this.winWidth;
      var leftTopPosX = this.winWidth / 2 - this.clipWidth / 2;
      var leftTopPosY = this.winHeight / 2 - this.clipHeight / 2;
      this.ctx.strokeRect(leftTopPosX, leftTopPosY, this.clipWidth, this.clipHeight);
      this.rectPos = {
        x1: leftTopPosX,
        y1: leftTopPosY
      };
      this.rectPos.x2 = leftTopPosX + this.clipWidth;
      this.rectPos.y2 = leftTopPosY + this.clipHeight;
    }
  }, {
    key: 'drawMask',
    value: function drawMask() {
      this.ctx.fillStyle = 'rgba(0,0,0,.6)';
      this.ctx.fillRect(0, 0, this.canvas.width, this.rectPos.y1);
      this.ctx.fillRect(0, 0, this.rectPos.x1, this.canvas.height);
      this.ctx.fillRect(this.rectPos.x2, 0, this.canvas.width - this.rectPos.x2, this.canvas.height);
      this.ctx.fillRect(0, this.rectPos.y2, this.canvas.width, this.canvas.height - this.rectPos.y2);
    }
  }, {
    key: 'pinch',
    value: function pinch(evt) {
      this.isTouch = true;
      var scale = this.scale * (evt.zoom || 1);
      if (scale > this.maxScale) {
        return false;
      }
      this.drawWidth = this.imgWidth * scale;
      this.drawHeight = this.imgHeight * scale;
      this.drawImage();
      this.drawClipRect();
      this.drawMask();
    }
  }, {
    key: 'multipointEnd',
    value: function multipointEnd(evt) {
      this.isTouch = false;
      this.scale = this.drawWidth / this.imgWidth;
      if (!this.isBeyond()) {
        this.reset();
        return false;
      }
    }
  }, {
    key: 'pressMove',
    value: function pressMove(evt) {
      this.isTouch = true;
      this.originX = this.originX + evt.deltaX;
      this.originY = this.originY + evt.deltaY;
      this.drawImage();
      this.drawClipRect();
      this.drawMask();
    }
  }, {
    key: 'rotate',
    value: function rotate() {
      var _this2 = this;
      var canvas = document.createElement('canvas');
      var ctx = canvas.getContext('2d');
      canvas.width = this.imgObj.height; // 因为canvas重置宽高会刷新画板,所以预先手动转换宽高
      canvas.height = this.imgObj.width;
      ctx.translate(this.imgObj.height, 0); // 将canvas的画布点转移到右上角
      ctx.rotate(90 * Math.PI / 180);
      ctx.drawImage(this.imgObj, 0, 0, this.imgObj.width, this.imgObj.height);
      this.src2obj(canvas.toDataURL()).then(function (img) {
        _this2.imgObj = img;
        _this2.imgWidth = img.width;
        _this2.imgHeight = img.height;
        _this2.initCut();
      });
    }
  }, {
    key: 'getPhotoOrientation',
    value: function getPhotoOrientation(img) {
      var me = this;
      this.EXIF.getData(img, function () {
        me.orient = me.EXIF.getTag(this, 'Orientation');
      });
      return me.orient !== 1 || me.orient !== undefined;
    }
  }, {
    key: 'isBeyond',
    value: function isBeyond() {
      // 注: x1y1代表左上角 x2y2代表右下角坐标
      if (this.rectPos.x1 - this.imgPos.x1 >= 0 && this.rectPos.y1 - this.imgPos.y1 >= 0 && this.rectPos.x2 - this.imgPos.x2 <= 0 && this.rectPos.y2 - this.imgPos.y2 <= 0) {
        return true;
      } else {
        return false;
      }
    }
  }, {
    key: 'reset',
    value: function reset(resetPos) {
      var _this3 = this;

      if (this.isTouch) {
        return false;
      }
      // 注: x1y1代表左上角 x2y2代表右下角坐标
      var count = 0,
          rate = 1.5;
      if (!resetPos) {
        resetPos = {
          x1: this.imgPos.x1,
          y1: this.imgPos.y1,
          x2: this.imgPos.x2,
          y2: this.imgPos.y2
        };
      }
      var disX1 = this.rectPos.x1 - this.imgPos.x1;
      var disY1 = this.rectPos.y1 - this.imgPos.y1;
      var disX2 = this.rectPos.x2 - this.imgPos.x2;
      var disY2 = this.rectPos.y2 - this.imgPos.y2;
      if (disX1 < 0 && disX2 > 0 || disY1 < 0 && disY2 > 0) {
        this.initCut();
        return false;
      }
      if (disX1 < 0) {
        count++;
        resetPos.x1 = this.rectPos.x1 - (Math.abs(disX1) < 1 ? 0 : disX1 / rate);
        resetPos.x2 = resetPos.x1 + this.imgWidth * this.scale;
      }
      if (disY1 < 0) {
        count++;
        resetPos.y1 = this.rectPos.y1 - (Math.abs(disY1) < 1 ? 0 : disY1 / rate);
        resetPos.y2 = resetPos.y1 + this.imgHeight * this.scale;
      }
      if (disX2 > 0) {
        count++;
        resetPos.x2 = this.rectPos.x2 - (Math.abs(disX2) < 1 ? 0 : disX2 / rate);
        resetPos.x1 = this.rectPos.x2 - this.imgWidth * this.scale;
      }
      if (disY2 > 0) {
        count++;
        resetPos.y2 = this.rectPos.y2 - (Math.abs(disY2) < 1 ? 0 : disY2 / rate);
        resetPos.y1 = this.rectPos.y2 - this.imgHeight * this.scale;
      }
      if (count > 2) {
        this.initCut();
        return false;
      }
      this.originX = resetPos.x1 + (resetPos.x2 - resetPos.x1) / 2;
      this.originY = resetPos.y1 + (resetPos.y2 - resetPos.y1) / 2;
      this.drawImage();
      this.drawMask();
      if (count > 0) {
        setTimeout(function () {
          _this3.reset(resetPos);
        }, 20);
      }
    }
  }, {
    key: 'getClipPos',
    value: function getClipPos() {
      // 获取最终裁剪坐标
      return {
        w: ~~(this.clipWidth / this.scale),
        h: ~~(this.clipHeight / this.scale),
        offsetX: ~~((this.rectPos.x1 - this.imgPos.x1) / this.scale),
        offsetY: ~~((this.rectPos.y1 - this.imgPos.y1) / this.scale)
      };
    }
  }, {
    key: 'confirm',
    value: function confirm() {
      var clipPos = this.getClipPos();
      var originCanvas = document.createElement('canvas');
      var originCanvasCtx = originCanvas.getContext('2d');
      originCanvas.width = clipPos.w;
      originCanvas.height = clipPos.h;
      originCanvasCtx.drawImage(this.imgObj, -clipPos.offsetX, -clipPos.offsetY, this.imgObj.width, this.imgObj.height);
      var base64 = originCanvas.toDataURL();
      this.onConfirm && this.onConfirm({
        base64: base64,
        file: convertBase64UrlToBlob(base64),
        clip: clipPos
      });
      document.body.removeEventListener('touchmove', this.preventHandle);
      this.container.style.display = 'none';
      this.container.parentNode.removeChild(this.container);
    }
  }, {
    key: 'cancel',
    value: function cancel() {
      document.body.removeEventListener('touchmove', this.preventHandle);
      this.imgObj = null;
      this.container.style.display = 'none';
      this.container.parentNode.removeChild(this.container);
      this.onCancel && this.onCancel();
    }
  }]);

  return ImbCrop;
}();

module.exports = ImbCrop;
